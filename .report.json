{"created": 1649990291.2010455, "duration": 0.931981086730957, "exitcode": 1, "root": "C:\\Users\\Coke\\playground\\Section3\\ds-sc-33", "environment": {"Python": "3.8.13", "Platform": "Windows-10-10.0.19043-SP0", "Packages": {"pytest": "6.2.2", "py": "1.10.0", "pluggy": "0.13.1"}, "Plugins": {"json-report": "1.5.0", "metadata": "2.0.1", "submit": "1.3.3"}}, "summary": {"failed": 5, "passed": 1, "total": 6, "collected": 6}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/__init__.py", "type": "Package"}, {"nodeid": "tests/Part_1/Part_1.py", "type": "Module"}, {"nodeid": "tests/Part_2/Part_2.py", "type": "Module"}, {"nodeid": "tests/Part_2/conftest.py", "type": "Module"}, {"nodeid": "tests/Part_3/Part_3.py", "type": "Module"}]}, {"nodeid": "tests/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "tests/__init__.py", "outcome": "passed", "result": [{"nodeid": "tests/__init__.py", "type": "Module"}]}, {"nodeid": "tests/Part_1/Part_1.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_1/Part_1.py::test_json", "type": "Function", "lineno": 17}]}, {"nodeid": "tests/Part_2/Part_2.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_2/Part_2.py::test_product", "type": "Function", "lineno": 10}, {"nodeid": "tests/Part_2/Part_2.py::test_anwser_1", "type": "Function", "lineno": 22}, {"nodeid": "tests/Part_2/Part_2.py::test_all", "type": "Function", "lineno": 29}, {"nodeid": "tests/Part_2/Part_2.py::test_post", "type": "Function", "lineno": 43}]}, {"nodeid": "tests/Part_2/conftest.py", "outcome": "passed", "result": []}, {"nodeid": "tests/Part_3/Part_3.py", "outcome": "passed", "result": [{"nodeid": "tests/Part_3/Part_3.py::test_part3", "type": "Function", "lineno": 4}]}], "tests": [{"nodeid": "tests/Part_1/Part_1.py::test_json", "lineno": 17, "outcome": "failed", "keywords": ["test_json", "tests/Part_1/Part_1.py", "ds-sc-33"], "setup": {"duration": 0.000329099999999638, "outcome": "passed"}, "call": {"duration": 0.0004702000000000872, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 355, "message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"}, "traceback": [{"path": "tests\\Part_1\\Part_1.py", "lineno": 19, "message": ""}, {"path": "sprint_challenge\\Part_1.py", "lineno": 13, "message": "in json_to_pickle"}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\__init__.py", "lineno": 357, "message": "in loads"}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 337, "message": "in decode"}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 355, "message": "JSONDecodeError"}], "longrepr": "def test_json():\n>       assert load_pickle(TEST_PATH_1) == json_to_pickle(\"./sprint_challenge/sample1.json\")\n\ntests\\Part_1\\Part_1.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsprint_challenge\\Part_1.py:13: in json_to_pickle\n    dict = json.loads(path)\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001932DD3B880>\ns = './sprint_challenge/sample1.json', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py:355: JSONDecodeError"}, "teardown": {"duration": 0.00035959999999990444, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_product", "lineno": 10, "outcome": "failed", "keywords": ["test_product", "ds-sc-33", "tests/Part_2/Part_2.py"], "setup": {"duration": 0.0004151000000001126, "outcome": "passed"}, "call": {"duration": 0.004845500000000058, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sc-33\\tests\\Part_2\\Part_2.py", "lineno": 21, "message": "assert 404 == 200\n  +404\n  -200"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 21, "message": "AssertionError"}], "longrepr": "get_app = <Flask 'sprint_challenge.Part_2'>\n\n    def test_product(get_app):\n        \"\"\"\n        product\uc5d0 \uc811\uc18d\ud558\uac8c \ub418\uba74, \uc601\uc5b4 \ubb38\uc790\uc5f4\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n        1. \uc811\uc18d\uc5d0 \uc131\uacf5\n        2. \ubb38\uc790\uc5f4 \ud655\uc778\n        \"\"\"\n        app = get_app\n    \n        with app.test_client() as test_client:\n            response = test_client.get('/product')\n>           assert response.status_code == 200\nE           assert 404 == 200\nE             +404\nE             -200\n\ntests\\Part_2\\Part_2.py:21: AssertionError"}, "teardown": {"duration": 0.0003055000000000696, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_anwser_1", "lineno": 22, "outcome": "failed", "keywords": ["test_anwser_1", "ds-sc-33", "tests/Part_2/Part_2.py"], "setup": {"duration": 0.0002781999999998952, "outcome": "passed"}, "call": {"duration": 0.001263499999999862, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sc-33\\tests\\Part_2\\Part_2.py", "lineno": 28, "message": "assert '<!DOCTYPE HT... again.</p>\\n' == 'This is Product'\n  - This is Product\n  + <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n  + <title>404 Not Found</title>\n  + <h1>Not Found</h1>\n  + <p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 28, "message": "AssertionError"}], "longrepr": "get_app = <Flask 'sprint_challenge.Part_2'>\n\n    def test_anwser_1(get_app):\n        app = get_app\n    \n        with app.test_client() as test_client:\n            response = test_client.get('/product')\n>           assert response.get_data().decode() == 'This is Product'\nE           assert '<!DOCTYPE HT... again.</p>\\n' == 'This is Product'\nE             - This is Product\nE             + <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\nE             + <title>404 Not Found</title>\nE             + <h1>Not Found</h1>\nE             + <p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n\ntests\\Part_2\\Part_2.py:28: AssertionError"}, "teardown": {"duration": 0.00026390000000020564, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_all", "lineno": 29, "outcome": "failed", "keywords": ["test_all", "ds-sc-33", "tests/Part_2/Part_2.py"], "setup": {"duration": 0.00026530000000013487, "outcome": "passed"}, "call": {"duration": 0.003539800000000426, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\playground\\Section3\\ds-sc-33\\tests\\Part_2\\Part_2.py", "lineno": 40, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 40, "message": "AssertionError"}], "log": [{"name": "sprint_challenge.Part_2", "msg": "Exception on /all [GET]", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py", "filename": "app.py", "module": "app", "exc_info": null, "exc_text": "Traceback (most recent call last):\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 2070, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1515, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1513, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1499, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File \"C:\\Users\\Coke\\playground\\Section3\\ds-sc-33\\sprint_challenge\\Part_2.py\", line 33, in get_fruits\n    cur.execute(\"SELECT * FROM Part2_table, ORDER BY name\")\nsqlite3.OperationalError: near \"ORDER\": syntax error", "stack_info": null, "lineno": 1454, "funcName": "log_exception", "created": 1649990291.1720448, "msecs": 172.0447540283203, "relativeCreated": 2203.5253047943115, "thread": 479624, "threadName": "MainThread", "processName": "MainProcess", "process": 482740}], "longrepr": "get_app = <Flask 'sprint_challenge.Part_2'>\n\n    def test_all(get_app):\n        \"\"\"\n        product\uc5d0 \uc811\uc18d\ud558\uac8c \ub418\uba74, \uc601\uc5b4 \ubb38\uc790\uc5f4\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n        1. \uc811\uc18d\uc5d0 \uc131\uacf5\n        2. \ubb38\uc790\uc5f4 \ud655\uc778\n        \"\"\"\n        app = get_app\n    \n        with app.test_client() as test_client:\n            response = test_client.get('/all')\n>           assert response.status_code == 200\nE           assert 500 == 200\nE             +500\nE             -200\n\ntests\\Part_2\\Part_2.py:40: AssertionError"}, "teardown": {"duration": 0.0002591000000000676, "outcome": "passed"}}, {"nodeid": "tests/Part_2/Part_2.py::test_post", "lineno": 43, "outcome": "failed", "keywords": ["test_post", "ds-sc-33", "tests/Part_2/Part_2.py"], "setup": {"duration": 0.0002716999999998748, "outcome": "passed"}, "call": {"duration": 0.00279150000000028, "outcome": "failed", "crash": {"path": "C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 355, "message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)"}, "traceback": [{"path": "tests\\Part_2\\Part_2.py", "lineno": 58, "message": ""}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\__init__.py", "lineno": 357, "message": "in loads"}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 337, "message": "in decode"}, {"path": "..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py", "lineno": 355, "message": "JSONDecodeError"}], "log": [{"name": "sprint_challenge.Part_2", "msg": "Exception on /all [GET]", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py", "filename": "app.py", "module": "app", "exc_info": null, "exc_text": "Traceback (most recent call last):\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 2070, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1515, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1513, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"C:\\Users\\Coke\\anaconda3\\envs\\sc33\\lib\\site-packages\\flask\\app.py\", line 1499, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File \"C:\\Users\\Coke\\playground\\Section3\\ds-sc-33\\sprint_challenge\\Part_2.py\", line 33, in get_fruits\n    cur.execute(\"SELECT * FROM Part2_table, ORDER BY name\")\nsqlite3.OperationalError: near \"ORDER\": syntax error", "stack_info": null, "lineno": 1454, "funcName": "log_exception", "created": 1649990291.1800451, "msecs": 180.04512786865234, "relativeCreated": 2211.5256786346436, "thread": 479624, "threadName": "MainThread", "processName": "MainProcess", "process": 482740}], "longrepr": "get_app = <Flask 'sprint_challenge.Part_2'>\n\n    def test_post(get_app):\n        \"\"\"\n        post \ub85c apple \uc774\ub780 \ubb38\uc790\uc5f4\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4.\n        - database : fruit\n        - table : Part2_table\n        \"\"\"\n        DATA_FILEPATH = os.path.join(os.path.dirname(__file__), 'part2_data')\n        data = []\n        with open(DATA_FILEPATH,'rb') as f:\n            data = pickle.load(f)\n    \n        app = get_app\n        with app.test_client() as test_client:\n            response = test_client.get('/all')\n>           assert json.loads(response.get_data()) == data\n\ntests\\Part_2\\Part_2.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001932DD3B880>\ns = '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\\n<title>500 Internal Server Error</title>\\n<h1>Internal Serve...nd was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\anaconda3\\envs\\sc33\\lib\\json\\decoder.py:355: JSONDecodeError"}, "teardown": {"duration": 0.0003332999999998698, "outcome": "passed"}}, {"nodeid": "tests/Part_3/Part_3.py::test_part3", "lineno": 4, "outcome": "passed", "keywords": ["tests/Part_3/Part_3.py", "test_part3", "ds-sc-33"], "setup": {"duration": 0.00021599999999999397, "outcome": "passed"}, "call": {"duration": 0.0002410000000003798, "outcome": "passed"}, "teardown": {"duration": 0.0002112999999996923, "outcome": "passed"}}]}